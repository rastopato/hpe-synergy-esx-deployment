---
- hosts: ba_synergy
  connection: local
  gather_facts: false
  become: no
  vars:
    ansible_python_interpreter: /usr/bin/python3
    ansible_host_key_checking: false
    validate_certs: false
    # esxi_build: "21203435" #8.0.0c ACS
    # esxi_build: "22380479" #8.0.2
    esxi_build: "20036589" #7.0.3

  collections:
    - hpe.oneview

  tasks:

# Unpack ESXi ISO Image to image directory....
# Create and update and copy BOOT.cfg to files/{{ esxi_build }}/EFI/BOOT/BOOT.CFG

# Create directory for each baremetal server to install to put Kickstart to it...

   - name: . . . Create directory for kickstart files . . .
     ansible.builtin.file:
       path: kickstarts/{{ item.hostname }}
       state: directory
     delegate_to: localhost          
     loop: "{{ esxi_servers }}"   
     loop_control:
       label: "Directory for {{ item.hostname }} created ..."  

# Copy customized BOOT.CFG to upacked ISO directory..
   - name: Copying custom UEFI boot.cfg to root efi directory . . .
     copy:
       src: files/{{ esxi_build }}/EFI/BOOT/BOOT.CFG
       dest: image/EFI/BOOT/BOOT.CFG
     delegate_to: localhost       

# Create kickstart file for each baremetal server
   - name: Creating kickstart file with proper automation contents . . .
     copy:
       force: true
       dest: kickstarts/{{ item.hostname }}/ks.cfg
       content: |
         accepteula
         clearpart --firstdisk=local --overwritevmfs
         install --firstdisk=local --overwritevmfs
         rootpw --iscrypted {{ encrypted_root_password }}
         keyboard 'US Default'
         network --bootproto=static --addvmportgroup=0 --vlanid={{ vlan_id }} --ip={{ item.ip }} --netmask={{ net_mask }} --gateway={{ gate_way }} --nameserver={{ dns_servers }} --hostname={{ item.hostname }}.infra.rpc.datacentrum.sk --device=vmnic0
         reboot 

         %firstboot --interpreter=busybox
         esxcli network vswitch standard uplink add --uplink-name=vmnic1 --vswitch-name=vSwitch0
         sut /set mode=AutoDeploy
     delegate_to: localhost  
     loop: "{{ esxi_servers }}"    
     loop_control:
       label: "Kickstart file for {{ item.hostname }} created ..."      

# Create custom bootable ISO file for installing ESXi servers, with path to kickstart file
   - name: Creating bootable iso from all files . . .
     shell: >
       mkisofs
       -relaxed-filenames
       -J
       -R
       -o custom_esx.iso
       -b ISOLINUX.BIN
       -c BOOT.CAT
       -no-emul-boot
       -boot-load-size 4
       -boot-info-table
       -eltorito-alt-boot
       -b EFIBOOT.IMG
       -no-emul-boot
       image/
     delegate_to: localhost          

# Create image file with kickstart file to connect to USB for each baremetal server and move to web server path
   - name: Creating img file with kickstart . . .
     shell: |
       ./dir2img.sh {{ item.hostname }}.img 32 kickstarts/{{ item.hostname }}
       mv {{ item.hostname }}.img {{ web_server_path }}
     delegate_to: localhost          
     loop: "{{ esxi_servers }}"
     loop_control:
       label: "Kickstart image for {{ item.hostname }} created ..."      

# Moving custom bootable ISO to web server path
   - name: Moving created iso to webserver . . .
     shell: |
       mv custom_esx.iso {{ web_server_path }} 
     delegate_to: localhost          

# Create Oneview profile for each baremetal server from template
   - name: Create Server Profile from Template
     oneview_server_profile:
       hostname: "{{ ov_ip }}"
       username: "{{ ov_username }}"
       password: "{{ ov_password }}"
       api_version: "{{ ov_api_version }}"
       state: present
       data:
         serverProfileTemplateName: "{{ ov_template }}"
         name: "{{ item.hostname }}"
         serverHardwareName: "{{ item.position }}"
       params: 
         force: true
     delegate_to: localhost
     loop: "{{ esxi_servers }}"
     loop_control:
       label: "Profile {{ item.hostname }} created and assigned to {{ item.position }}"

 # Getting info about all HW in Oneview in order to get ILO IP addresses
   - name: Gathering ILO IP Addresses
     oneview_server_hardware_facts:
       hostname: "{{ ov_ip }}"
       username: "{{ ov_username }}"
       password: "{{ ov_password }}"
       api_version: "{{ ov_api_version }}"
       name: "{{ item.position }}"
     register: ilo_ips
     delegate_to: localhost
     loop: "{{ esxi_servers }}"
     loop_control:
       label: "Info about {{ item.hostname }} gathered ..."   
     tags:
        - iloip
    
   - set_fact: result="{{ ilo_ips.results | map(attribute='ansible_facts.server_hardwares.mpHostInfo.mpIpAddresses') | regex_findall('(?<!\\d)(?:\\d{1,3}\\.){3}\\d{1,3}(?!\\d)') }}"
     delegate_to: localhost      
     tags:
        - iloip

# Adding ILO IP Addresses to the initial list of esx servers
   - name: Adding ILO addresses to esx servers list
     set_fact:
       esxi_servers_final: "{{
         esxi_servers_final | default ([]) +
           [
             {
               'hostname': item.0.hostname,
               'ip': item.0.ip,
               'position': item.0.position,
               'ilo': item.1
             }
           ]
        }}"
     delegate_to: localhost           
     with_together:
       - "{{ esxi_servers }}"
       - "{{ result }}"
     loop_control:
       label: "{{ item.0.hostname }} has ILO IP {{ item.1 }}..."   
     tags:
        - iloip

# Booting baremetal servers for the first time to apply profiles correctly...
   - name: Booting for the first time . . .
     community.general.hpilo_boot:       
       host: "{{ item.ilo }}"
       login: hpadmin
       password: "{{ ilo_password }}"
       media: normal
     delegate_to: localhost
     loop: "{{ esxi_servers_final }}"
     loop_control:
       pause: 5
       label: "{{ item.hostname }} booted for the first time ..."   

# Wait 3 minutes to loop the POST
   - name: Wait for 3 minutes...
     ansible.builtin.wait_for:
       timeout: 180
     delegate_to: localhost

# Power off baremetal servers
   - name: Powering off servers . . .
     community.general.hpilo_boot:       
       host: "{{ item.ilo }}"
       login: hpadmin
       password: "{{ ilo_password }}"
       state: poweroff
     delegate_to: localhost
     loop: "{{ esxi_servers_final }}"
     loop_control:
       pause: 5
       label: "{{ item.hostname }} powered off ..."  

   - name: Wait for 60 seconds...
     ansible.builtin.wait_for:
       timeout: 60
     delegate_to: localhost

   - name: Mounting USB with kickstart file. . .
     community.general.redfish_command:       
       category: "Manager"
       command: "VirtualMediaInsert"
       baseuri: "{{ item.ilo }}"
       username: hpadmin
       password: "{{ ilo_password }}"
       timeout: 60
       virtual_media:
         image_url: "http://{{ web_server_ip }}/{{ item.hostname }}.img"
        #  media_types:
        #    - Floppy
     delegate_to: localhost
     loop: "{{ esxi_servers_final }}"
     loop_control:
       pause: 5
       label: "Kickstart for {{ item.hostname }} mounted to USB: ..."  

   - name: Booting once using the custom built iso . . .
     community.general.hpilo_boot:       
       host: "{{ item.ilo }}"
       login: hpadmin
       password: "{{ ilo_password }}"
       media: cdrom
       image: http://{{ web_server_ip }}/custom_esx.iso # <- Your webserver url should go here.
     delegate_to: localhost
     loop: "{{ esxi_servers_final }}"
     loop_control:
       pause: 5
       label: "{{ item.hostname }} booted for installation from custom ISO ..."  

   - name: Creating A DNS Record for host ...
     community.general.ipa_dnsrecord:
             ipa_host: "{{ ipa_host }}"
             ipa_pass: "{{ ipa_admin_password }}"
             ipa_user: admin
             record_name: "{{ item.hostname }}"
             record_type: "A"
             record_value: "{{ item.ip }}"
             state: present
             zone_name: "{{ dns_zone }}"
             validate_certs: false
     delegate_to: localhost
     loop: "{{ esxi_servers }}"
     loop_control:
       label: "DNS Record A {{ item.hostname }} created ..."
     tags:
        - createdns

   - name: Creating PTR Records for host
     community.general.ipa_dnsrecord:
       ipa_host: "{{ ipa_host }}"
       ipa_pass: "{{ ipa_admin_password }}"
       ipa_user: admin
       record_name: "{{ item.ip | split('.') | last }}"
       record_type: "PTR"
       record_value: "{{ item.hostname }}.{{ dns_zone }}."
       state: present
       zone_name: "{{ dns_zone_ptr }}"
     delegate_to: localhost
     loop: "{{ esxi_servers }}"
     loop_control:
       label: "DNS Record PTR {{ item.hostname }} created ..."
     tags:
        - createdns

   - name: Waiting 10 minutes for custom installation to complete . . .
     ansible.builtin.wait_for:
       timeout: 900
     delegate_to: localhost
 
   - name: Eject USB with kickstart file. . .
     community.general.redfish_command:       
       category: "Manager"
       command: "VirtualMediaEject"
       baseuri: "{{ item.ilo }}"
       username: hpadmin
       password: "{{ ilo_password }}"
       timeout: 60
       virtual_media:
         image_url: "http://{{ web_server_ip }}/{{ item.hostname }}.img"
     delegate_to: localhost            
     loop: "{{ esxi_servers_final }}"
     loop_control:
       pause: 5
       label: "Kickstart for {{ item.hostname }} mounted to USB: ..."  
     tags:
        - ejectusb

   - name: Deleting all related files from staging location and web server . . .
     shell: |
       rm -rf kickstarts/{{ item.hostname }}
       rm {{ web_server_path }}{{ item.hostname }}.img
     delegate_to: localhost          
     loop: "{{ esxi_servers }}"
     loop_control:
       label: "{{ item.hostname }} ISO Image deleted ..."  
     tags:
         - cleanup
